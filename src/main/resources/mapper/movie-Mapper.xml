<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 모든 SQL문을 mapper태그 안에 작성 -->
<mapper namespace="movieMapper">
	<!-- 영화 -->
	<resultMap type="com.kh.project.movie.vo.MovieVO" id="movie">
		<id column="MV_CODE"				property="mvCode"/>
		<result column="TITLE"				property="title"/>
		<result column="DIRECTOR"			property="director"/>
		<result column="ACTOR"				property="actor"/>
		<result column="GENRE"				property="genre"/>
		<result column="AGE"				property="age"/>
		<result column="RUNNING_TIME"		property="runningTime"/>
		<result column="NATION"				property="nation"/>
		<result column="OPEN_DATE"			property="openDate"/>
		<result column="CONTENT"			property="content"/>
		<result column="MV_STATE"			property="mvState"/>
		<result column="GRADE"				property="grade"/>
		<result column="ATTACHED_IMG_NAME"	property="attachedImgName"/>
	</resultMap>
	
	<!-- 댓글 -->
	<resultMap type="com.kh.project.movie.vo.MovieReplyVO" id="reply">
		<id column="MV_REPLY_CODE"			property="mvReplyCode"/>
		<result column="CREATE_DATE"		property="createDate"/>
		<result column="GRADE"				property="grade"/>
		<result column="WRITER"				property="writer"/>
		<result column="MV_REPLY_CONTENT"	property="mvReplyContent"/>
		<result column="MV_CODE"			property="mvCode"/>
	</resultMap>
	
	<!-- 영화 포스터 이미지 파일 -->
	<resultMap type="com.kh.project.movie.vo.MovieImgVO" id="image">
		<id column="MOVIE_IMG_CODE"			property="movieImgCode"/>
		<result column="ORIGIN_IMG_NAME"	property="originImgName"/>
		<result column="ATTACHED_IMG_NAME"	property="attachedImgName"/>
		<result column="MV_CODE"			property="mvCode"/>
	</resultMap>
	
	
	
	<!-- 영화 목록 조회 - 메인화면, 영화목록 -->
	<select id="selectMovieList" resultMap="movie">
		SELECT M.MV_CODE
			, TITLE
			, GENRE
			, AGE
			, TO_CHAR(OPEN_DATE, 'YYYY.MM.DD') AS OPEN_DATE
			, MV_STATE
			, ATTACHED_IMG_NAME
		FROM OISONE_MOVIE M, OISONE_MOVIE_IMG I
		WHERE M.MV_CODE = I.MV_CODE
		ORDER BY MV_CODE
	</select>
	
	<!-- 영화 상세 조회 -->
	<select id="selectDetailMovie" resultMap="movie">
		SELECT M.MV_CODE
			, TITLE
			, DIRECTOR
			, ACTOR
			, GENRE
			, AGE
			, RUNNING_TIME
			, NATION
			, TO_CHAR(OPEN_DATE, 'YYYY.MM.DD') AS OPEN_DATE
			, CONTENT
			, GRADE
			, ATTACHED_IMG_NAME
		FROM OISONE_MOVIE M, OISONE_MOVIE_IMG I
		WHERE M.MV_CODE = I.MV_CODE
		AND M.MV_CODE = #{mvCode}
	</select>
	
	<!-- 영화 목록 조회 - 관리자 -->
	<select id="selectAdminMovieList" resultMap="movie">
		SELECT M.MV_CODE
			, TITLE
			, GENRE
			, AGE
			, TO_CHAR(OPEN_DATE, 'YYYY.MM.DD') AS OPEN_DATE
			, MV_STATE
			, ATTACHED_IMG_NAME
		FROM OISONE_MOVIE M, OISONE_MOVIE_IMG I
		WHERE M.MV_CODE = I.MV_CODE
		ORDER BY MV_CODE DESC
	</select>
	
	
	
	<!-- 영화 삭제 -->
	<delete id="deleteMovie">
		DELETE OISONE_MOVIE
		WHERE MV_CODE = #{mvCode}
	</delete>
	
	
	
	<!-- 다음 MV_CODE를 조회 -->
	<select id="selectNextMovieCode" resultType="String">
		SELECT 'MV_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(MV_CODE, 4, 4))), 0) + 1, 4, '0')
		FROM OISONE_MOVIE
	</select>
	
	<!-- 영화 등록 -->
	<insert id="insertMovie">
		INSERT INTO OISONE_MOVIE (
			MV_CODE
			, TITLE
			, DIRECTOR
			, ACTOR
			, GENRE
			, AGE
			, RUNNING_TIME
			, NATION
			, OPEN_DATE
			, CONTENT
		) VALUES (
			#{mvCode}
			, #{title}
			, #{director}
			, #{actor}
			, #{genre}
			, #{age}
			, #{runningTime}
			, #{nation}
			, #{openDate}
			, #{content}
		)
	</insert>
	
	
	
	<!-- 다음에 들어갈 MOVIE_IMG_CODE를 조회 -->
	<select id="selectNextImgCode" resultType="String">
		SELECT 'MVI_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(MOVIE_IMG_CODE, 5, 3))), 0) + 1, 3, '0')
		FROM OISONE_MOVIE_IMG
	</select>
	
	<!-- 영화 포스터 이미지 등록 -->
	<insert id="insertImage">
		INSERT INTO OISONE_MOVIE_IMG (
			MOVIE_IMG_CODE
			, ORIGIN_IMG_NAME
			, ATTACHED_IMG_NAME
			, MV_CODE
		) VALUES (
			#{movieImgCode}
			, #{originImgName}
			, #{attachedImgName}
			, #{mvCode}
		)
	</insert>
	
</mapper>












